# If true, each camera's video directory contains only the video files. If false, each camera's video directory contains an additional subdirectory, which then contains the video files
vid_dir_flag: True

# Video file extension
extension: '.mp4'

# The number of frames in each video file. If only a single video file exists for each camera, set this to 1e10
chunks: 3000

io_config: io_temp.yaml

# Number of channels for each input image (e.g. RGB == 3)
n_channels_in: 3

# If training from scratch, set to the desired number of output channels (i.e. keypoints)
# If fine-tuning, this must match the previous number of output channels, and the new desired
# number is set by new_n_channels_out
n_channels_out: 20

# New number of network output channels.
new_n_channels_out: 22
# New size of the final output kernel
new_last_kernel_size: [3,3,3]

# batch_size
batch_size: 4

# Number of parallel workers serving data to the model
workers: 4

# Max. number of batches in multi-processing queue
max_queue_size: 20

# DANNCE training option. Sets the size of the 3D Guassians (in mm) used as labels for the MAX models
sigma: 10

# DANNCE training option. Sets the number of epochs during training (default 1200)
epochs: 1

# DANNCE training option. Sets the verbosity of training output
verbose: 1

# DANNCE training option. Loss function to be used. Default MSE.
loss: mask_nan_keep_loss

# DANNCE training option. Learning rate for the Adam optimizer. Default 1e-3.
lr: 1e-3

# During prediction, will look for the last epoch weights saved to ./DANNCE/train_results/. To load in a different weights file, add the path here
# Note that this must be a FULL MODEL file, not just weights.
#predict_model: path_to_model_file

# name of the network architecture (see nets.py) 'unet3d_big' (from scratch?)
net: finetune_AVG

# whether to use batch normalization or instance normalization. cannot both be true. If fine-tuning, this must be the same setting as used for the initial network
batch_norm: False
instance_norm: True

# Options:
# 'new': initializes and trains a network from scratch
# 'finetune': loads in pre-trained weights and fine-tuned from there
# 'continued': initializes a full model, including optimizer state, and continuous training from the last full model checkpoint
train_mode: finetune

# When fine-tuning, sets the number of layers, starting from the input layer, to lock during training. Default 2
n_layers_locked: 2

# If true, each camera's video directory contains only the video files. If false, each camera's video directory contains an additional subdirectory, which then contains the video files
vid_dir_flag: True

# DANNCE training. Metric to be monitored in addition to loss
metric: ['mse']
#['euclidean_distance_3D','centered_euclidean_distance_3D']

# How many samples from each animal do you want to (randomly) set aside for a validation metric?
num_validation_per_exp: 4

# When using a system with multiple GPUs, we should just target one of them
gpu_id: "0"

# The number of frames in each video file
chunks: 3000

# Limits (in mm) to 3D volumes anchored on subject
vmin: -60
vmax: 60
# Number of voxels along each spatial dimension
nvox: 64

# Interpolation mode.
interp: nearest

# If depth is true, will append depth information when sampling images. Particularly useful when using just 1 cameras.
depth: False

immode: 'vid'

# DANNCE training option. Whether to turn on rotation augmentation during training
rotate: True

# Whether to apply lens distortion during sampling. Default True
distort: True

# If true, intializes an "AVG" version of the network (i.e. final spatial expected value output layer). If false, "MAX" version
expval: False

# COM finder output confidence scores less than this threshold will be discarded
com_thresh: 0

# If True, will weight the COM estimate in each camera by its confidence score
weighted: False

# Method of combining 3D COMs across camera pairs. Options: 'median', 'mean'
com_method: 'median'

# If the 3D COM has a coordinate beyond this value (in mm), discard it as an error. How large is your arena?
cthresh: 350

# Dictates whether or not to randomly shuffle the camera order when processing volumes. Options: 'None', 'random'
channel_combo: 'None'

# max. number of batches to evaluate during prediction. set to 'max' to evaluate over all data/video frames
max_num_samples: 10

start_batch: 0

predict_mode: 'torch'

dannce_finetune_weights: ../../demo/markerless_mouse_1/DANNCE/weights/
